out$params   <- mat2mcmc.list(mfit[,-pred.cols])
fitted_model <- out
## Collate predictions
predictions        <- rbind(fitted_model$predict[[1]],
fitted_model$predict[[2]],
fitted_model$predict[[3]])
median_predictions <- apply(predictions, MARGIN = 2, FUN = "median")
upper_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.975)})
lower_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.025)})
prediction_df      <- data.frame(year = c(bison_dat$year, (max(bison_dat$year)+1):(max(bison_dat$year)+10)),
observation = c(bison_dat$count.mean,rep(NA,10)),
upper_observation = c(bison_dat$count.mean+bison_dat$count.sd,rep(NA,10)),
lower_observation = c(bison_dat$count.mean-bison_dat$count.sd,rep(NA,10)),
median_prediction = median_predictions,
upper_prediction = upper_predictions,
lower_prediction = lower_predictions)
####
####  Plot the calibration data and predictions
####
pred_color <- "#CF4C26"
obs_color  <- "#0A9AB8"
calibration_plot <- ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_errorbar(aes(ymin=lower_observation, ymax=upper_observation), width=0.5, color=obs_color, size=0.2)+
geom_point(aes(y=observation), color=obs_color, size=0.5)+
geom_vline(aes(xintercept=max(bison_dat$year)), linetype=2,color="grey55")+
ylab("Number of bison")+
xlab("Year")+
my_theme
calibration_plot
out_variables <- c("r","b","b1","sigma_proc","z","sigma_imp")
##  Send to JAGS
mc3     <- jags.model(file=textConnection(my_model), data=mydat, n.chains=3)
update(mc3, n.iter = 5000)
mc3.out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=5000)
summary(mc3.out)$stat
bison_dat$count.sd
################################################################################
##  bison_forecast.R: R script to fit a population growth model for YNP,
##  forecast 10 new years, and partition the forecast variance.
##
##  Based on Dietze 2017, Ecological Applications
##  http://onlinelibrary.wiley.com/doi/10.1002/eap.1589/full
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##  Date created: October 19, 2016
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location...
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
####
####  LOAD LIBRARIES ----
####
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(dplyr)
library(rjags)
library(coda)
# library(devtools)
# install_github("atredennick/ecoforecastR") # get latest version
library(ecoforecastR)
####
####  SET MY PLOTTING THEME ----------------------------------------------------
####
my_theme <- theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"))
####
####  LOAD DATA ----------------------------------------------------------------
####
snow_ynp  <- read.csv("../data/west_yellowstone_snotel_summary.csv") %>%
select(-X)
bison_raw <- read.csv("../data/YNP_bison_population_size.csv", row.names = 1)
bison_dat <- bison_raw %>%
dplyr::select(-index) %>%
left_join(snow_ynp, by="year")
# bison_dat[which(is.na(bison_dat$count.sd)==T),"count.sd"] <- mean(bison_dat$count.sd, na.rm=T)
nosd_ids <- which(is.na(bison_dat$count.sd)==T)
sd_ids <- which(is.na(bison_dat$count.sd)==F)
sd_ids <- sd_ids[which(sd_ids != 1)]
####
####  JAGS State-Space Model ---------------------------------------------------
####
my_model <- "
model{
#### Variance Priors
sigma_proc ~ dunif(0,10)
tau_proc <- 1/sigma_proc^2
for(i in 1:length(nosd_ids)){
sigma_imp[i] ~ dnorm(100,0.01)
tau_imp[i] <- 1/sigma_imp[i]^2
}
#### Fixed Effects Priors
r ~ dnorm(0.234, 1/0.136^2)
b ~ dnorm(0,0.0001)
b1 ~ dnorm(0,0.0001)
#### Initial Conditions
z[1] ~ dnorm(Nobs[1], tau_obs[1])
#### Process Model
for(t in 2:npreds){
mu[t] <- max( 1, log( z[t-1]*exp(r + b*z[t-1] + b1*x[t]) ) )
z[t] ~ dlnorm(mu[t], tau_proc)
}
#### Data Model
##  SD observations
for(j in sd_ids){
Nobs[j] ~ dnorm(z[j], tau_obs[j])
}
##  Imputed SD
for(j in 1:length(nosd_ids)){
Nobs[nosd_ids[j]] ~ dnorm(z[nosd_ids[j]], tau_imp[j])
}
}"
####
####  Fit Bison Forecasting Model ----------------------------------------------
####
##  Prepare data list
mydat         <- list(Nobs = bison_dat$count.mean,
tau_obs = 1/bison_dat$count.sd^2,
x = c(as.numeric(scale(bison_dat$accum_snow_water_equiv_mm)),
rep(0,10)),
npreds = nrow(bison_dat)+10,
nosd_ids = nosd_ids,
sd_ids = sd_ids)
out_variables <- c("r","b","b1","sigma_proc","z","sigma_imp")
##  Send to JAGS
mc3     <- jags.model(file=textConnection(my_model), data=mydat, n.chains=3)
update(mc3, n.iter = 5000)
mc3.out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=5000)
summary(mc3.out)$stat
summary(mc3.out)$quantile
## Split output
out          <- list(params=NULL, predict=NULL, model=my_model,data=mydat)
mfit         <- as.matrix(mc3.out,chains=TRUE)
pred.cols    <- union(grep("z[",colnames(mfit),fixed=TRUE),grep("mu[",colnames(mfit),fixed=TRUE))
chain.col    <- which(colnames(mfit)=="CHAIN")
out$predict  <- mat2mcmc.list(mfit[,c(chain.col,pred.cols)])
out$params   <- mat2mcmc.list(mfit[,-pred.cols])
fitted_model <- out
## Collate predictions
predictions        <- rbind(fitted_model$predict[[1]],
fitted_model$predict[[2]],
fitted_model$predict[[3]])
median_predictions <- apply(predictions, MARGIN = 2, FUN = "median")
upper_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.975)})
lower_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.025)})
prediction_df      <- data.frame(year = c(bison_dat$year, (max(bison_dat$year)+1):(max(bison_dat$year)+10)),
observation = c(bison_dat$count.mean,rep(NA,10)),
upper_observation = c(bison_dat$count.mean+bison_dat$count.sd,rep(NA,10)),
lower_observation = c(bison_dat$count.mean-bison_dat$count.sd,rep(NA,10)),
median_prediction = median_predictions,
upper_prediction = upper_predictions,
lower_prediction = lower_predictions)
##  Check parameter chains for convergence and mixing
# plot(fitted_model$params)
# gelman.diag(fitted_model$params)
# heidel.diag(fitted_model$params)
####
####  Plot the calibration data and predictions
####
pred_color <- "#CF4C26"
obs_color  <- "#0A9AB8"
calibration_plot <- ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_errorbar(aes(ymin=lower_observation, ymax=upper_observation), width=0.5, color=obs_color, size=0.2)+
geom_point(aes(y=observation), color=obs_color, size=0.5)+
geom_vline(aes(xintercept=max(bison_dat$year)), linetype=2,color="grey55")+
ylab("Number of bison")+
xlab("Year")+
my_theme
summary(mc3.out)$stat
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_errorbar(aes(ymin=lower_observation, ymax=upper_observation), width=0.5, color=obs_color, size=0.2)+
geom_point(aes(y=observation), color=obs_color, size=0.5)+
geom_vline(aes(xintercept=max(bison_dat$year)), linetype=2,color="grey55")+
ylab("Number of bison")+
xlab("Year")+
my_theme
summary(mc3.out)$quantile
################################################################################
##  bison_forecast.R: R script to fit a population growth model for YNP,
##  forecast 10 new years, and partition the forecast variance.
##
##  Based on Dietze 2017, Ecological Applications
##  http://onlinelibrary.wiley.com/doi/10.1002/eap.1589/full
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##  Date created: October 19, 2016
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location...
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
####
####  LOAD LIBRARIES ----
####
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(dplyr)
library(rjags)
library(coda)
# library(devtools)
# install_github("atredennick/ecoforecastR") # get latest version
library(ecoforecastR)
####
####  SET MY PLOTTING THEME ----------------------------------------------------
####
my_theme <- theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"))
####
####  LOAD DATA ----------------------------------------------------------------
####
snow_ynp  <- read.csv("../data/west_yellowstone_snotel_summary.csv") %>%
select(-X)
bison_raw <- read.csv("../data/YNP_bison_population_size.csv", row.names = 1)
bison_dat <- bison_raw %>%
dplyr::select(-index) %>%
left_join(snow_ynp, by="year")
bison_dat[which(is.na(bison_dat$count.sd)==T),"count.sd"] <- max(bison_dat$count.sd, na.rm=T)
####
####  JAGS State-Space Model ---------------------------------------------------
####
my_model <- "
model{
#### Variance Priors
sigma_proc ~ dunif(0,10)
tau_proc <- 1/sigma_proc^2
#### Fixed Effects Priors
r ~ dnorm(0.234, 1/0.136^2)
b ~ dnorm(0,0.0001)
b1 ~ dnorm(0,0.0001)
#### Initial Conditions
z[1] ~ dnorm(Nobs[1], tau_obs[1])
#### Process Model
for(t in 2:npreds){
mu[t] <- max( 1, log( z[t-1]*exp(r + b*z[t-1] + b1*x[t]) ) )
z[t] ~ dlnorm(mu[t], tau_proc)
}
#### Data Model
##  SD observations
for(j in 2:n){
Nobs[j] ~ dnorm(z[j], tau_obs[j])
}
}"
####
####  Fit Bison Forecasting Model ----------------------------------------------
####
##  Prepare data list
mydat         <- list(Nobs = bison_dat$count.mean,
n = nrow(bison_dat),
tau_obs = 1/bison_dat$count.sd^2,
x = c(as.numeric(scale(bison_dat$accum_snow_water_equiv_mm)),
rep(0,10)),
npreds = nrow(bison_dat)+10)
out_variables <- c("r","b","b1","sigma_proc","z")
##  Send to JAGS
mc3     <- jags.model(file=textConnection(my_model), data=mydat, n.chains=3)
update(mc3, n.iter = 5000)
mc3.out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=5000)
summary(mc3.out)$stat
summary(mc3.out)$quantile
## Split output
out          <- list(params=NULL, predict=NULL, model=my_model,data=mydat)
mfit         <- as.matrix(mc3.out,chains=TRUE)
pred.cols    <- union(grep("z[",colnames(mfit),fixed=TRUE),grep("mu[",colnames(mfit),fixed=TRUE))
chain.col    <- which(colnames(mfit)=="CHAIN")
out$predict  <- mat2mcmc.list(mfit[,c(chain.col,pred.cols)])
out$params   <- mat2mcmc.list(mfit[,-pred.cols])
fitted_model <- out
## Collate predictions
predictions        <- rbind(fitted_model$predict[[1]],
fitted_model$predict[[2]],
fitted_model$predict[[3]])
median_predictions <- apply(predictions, MARGIN = 2, FUN = "median")
upper_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.975)})
lower_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.025)})
prediction_df      <- data.frame(year = c(bison_dat$year, (max(bison_dat$year)+1):(max(bison_dat$year)+10)),
observation = c(bison_dat$count.mean,rep(NA,10)),
upper_observation = c(bison_dat$count.mean+bison_dat$count.sd,rep(NA,10)),
lower_observation = c(bison_dat$count.mean-bison_dat$count.sd,rep(NA,10)),
median_prediction = median_predictions,
upper_prediction = upper_predictions,
lower_prediction = lower_predictions)
##  Check parameter chains for convergence and mixing
# plot(fitted_model$params)
# gelman.diag(fitted_model$params)
# heidel.diag(fitted_model$params)
####
####  Plot the calibration data and predictions
####
pred_color <- "#CF4C26"
obs_color  <- "#0A9AB8"
calibration_plot <- ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_errorbar(aes(ymin=lower_observation, ymax=upper_observation), width=0.5, color=obs_color, size=0.2)+
geom_point(aes(y=observation), color=obs_color, size=0.5)+
geom_vline(aes(xintercept=max(bison_dat$year)), linetype=2,color="grey55")+
ylab("Number of bison")+
xlab("Year")+
my_theme
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_errorbar(aes(ymin=lower_observation, ymax=upper_observation), width=0.5, color=obs_color, size=0.2)+
geom_point(aes(y=observation), color=obs_color, size=0.5)+
geom_vline(aes(xintercept=max(bison_dat$year)), linetype=2,color="grey55")+
ylab("Number of bison")+
xlab("Year")+
my_theme
################################################################################
##  bison_forecast.R: R script to fit a population growth model for YNP,
##  forecast 10 new years, and partition the forecast variance.
##
##  Based on Dietze 2017, Ecological Applications
##  http://onlinelibrary.wiley.com/doi/10.1002/eap.1589/full
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##  Date created: October 19, 2016
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location...
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
####
####  LOAD LIBRARIES ----
####
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(dplyr)
library(rjags)
library(coda)
# library(devtools)
# install_github("atredennick/ecoforecastR") # get latest version
library(ecoforecastR)
####
####  SET MY PLOTTING THEME ----------------------------------------------------
####
my_theme <- theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"))
####
####  LOAD DATA ----------------------------------------------------------------
####
snow_ynp  <- read.csv("../data/west_yellowstone_snotel_summary.csv") %>%
select(-X)
bison_raw <- read.csv("../data/YNP_bison_population_size.csv", row.names = 1)
bison_dat <- bison_raw %>%
dplyr::select(-index) %>%
left_join(snow_ynp, by="year")
na_sds <- which(is.na(bison_dat$count.sd)==T)
bison_dat[na_sds,"count.sd"] <- max(bison_dat$count.sd, na.rm=T)
####
####  JAGS State-Space Model ---------------------------------------------------
####
my_model <- "
model{
#### Variance Priors
sigma_proc ~ dunif(0,10)
tau_proc <- 1/sigma_proc^2
#### Fixed Effects Priors
r ~ dnorm(0.234, 1/0.136^2)
b ~ dnorm(0,0.0001)
b1 ~ dnorm(0,0.0001)
#### Initial Conditions
z[1] ~ dnorm(Nobs[1], tau_obs[1])
#### Process Model
for(t in 2:npreds){
mu[t] <- max( 1, log( z[t-1]*exp(r + b*z[t-1] + b1*x[t]) ) )
z[t] ~ dlnorm(mu[t], tau_proc)
}
#### Data Model
##  SD observations
for(j in 2:n){
Nobs[j] ~ dnorm(z[j], tau_obs[j])
}
}"
####
####  Fit Bison Forecasting Model ----------------------------------------------
####
##  Prepare data list
mydat         <- list(Nobs = bison_dat$count.mean,
n = nrow(bison_dat),
tau_obs = 1/bison_dat$count.sd^2,
x = c(as.numeric(scale(bison_dat$accum_snow_water_equiv_mm)),
rep(0,10)),
npreds = nrow(bison_dat)+10)
out_variables <- c("r","b","b1","sigma_proc","z")
##  Send to JAGS
mc3     <- jags.model(file=textConnection(my_model), data=mydat, n.chains=3)
update(mc3, n.iter = 5000)
mc3.out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=5000)
summary(mc3.out)$stat
summary(mc3.out)$quantile
## Split output
out          <- list(params=NULL, predict=NULL, model=my_model,data=mydat)
mfit         <- as.matrix(mc3.out,chains=TRUE)
pred.cols    <- union(grep("z[",colnames(mfit),fixed=TRUE),grep("mu[",colnames(mfit),fixed=TRUE))
chain.col    <- which(colnames(mfit)=="CHAIN")
out$predict  <- mat2mcmc.list(mfit[,c(chain.col,pred.cols)])
out$params   <- mat2mcmc.list(mfit[,-pred.cols])
fitted_model <- out
## Collate predictions
bison_dat[na_sds,"count.sd"] <- NA
predictions        <- rbind(fitted_model$predict[[1]],
fitted_model$predict[[2]],
fitted_model$predict[[3]])
median_predictions <- apply(predictions, MARGIN = 2, FUN = "median")
upper_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.975)})
lower_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.025)})
prediction_df      <- data.frame(year = c(bison_dat$year, (max(bison_dat$year)+1):(max(bison_dat$year)+10)),
observation = c(bison_dat$count.mean,rep(NA,10)),
upper_observation = c(bison_dat$count.mean+bison_dat$count.sd,rep(NA,10)),
lower_observation = c(bison_dat$count.mean-bison_dat$count.sd,rep(NA,10)),
median_prediction = median_predictions,
upper_prediction = upper_predictions,
lower_prediction = lower_predictions)
##  Check parameter chains for convergence and mixing
# plot(fitted_model$params)
# gelman.diag(fitted_model$params)
# heidel.diag(fitted_model$params)
####
####  Plot the calibration data and predictions
####
pred_color <- "#CF4C26"
obs_color  <- "#0A9AB8"
calibration_plot <- ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_errorbar(aes(ymin=lower_observation, ymax=upper_observation), width=0.5, color=obs_color, size=0.2)+
geom_point(aes(y=observation), color=obs_color, size=0.5)+
geom_vline(aes(xintercept=max(bison_dat$year)), linetype=2,color="grey55")+
ylab("Number of bison")+
xlab("Year")+
my_theme
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_errorbar(aes(ymin=lower_observation, ymax=upper_observation), width=0.5, color=obs_color, size=0.2)+
geom_point(aes(y=observation), color=obs_color, size=0.5)+
geom_vline(aes(xintercept=max(bison_dat$year)), linetype=2,color="grey55")+
ylab("Number of bison")+
xlab("Year")+
my_theme
##  Initial condition uncertainty: make forecasts from all MCMC iterations of
##    the final year, but use mean parameter values and no process error.
forecast_steps <- 10
num_iters      <- 1000
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
x
param_summary  <- summary(fitted_model$params)$quantile
param_summary
iterate_process <- function(Nnow, xnow, r, b, b1, sd_proc) {
Ntmp <- Nnow*exp(r + b*Nnow + b1*xnow)
# Ntmp <- Nnow + r * Nnow * (1 - Nnow / K)
Ntmp[which(Ntmp < 1)] <- 1
N    <- rlnorm(length(Nnow), log(Ntmp), sd_proc)
}
##  Initial condition uncertainty: make forecasts from all MCMC iterations of
##    the final year, but use mean parameter values and no process error.
forecast_steps <- 10
num_iters      <- 1000
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
param_summary  <- summary(fitted_model$params)$quantile
r              <- param_summary[3,3]
b              <- param_summary[1,3]
b1             <- param_summary[2,3]
sd_proc        <- param_summary[4,3]
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = 0, r = r, b = b, b1 = b1, sd_proc = 0)
forecasts[,t] <- x
}
forecasts
varI <- apply(forecasts,2,var)
varI
