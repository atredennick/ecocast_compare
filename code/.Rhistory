## IP
ciIP <- apply(as.matrix(FE_pred.IP$predict),2,quantile,c(0.025,0.5,0.975))
ciEnvelope(meta.ds[[2]],ciIP[1,],ciIP[3,],col="lightGreen")
varIP <- apply(as.matrix(FE_pred.IP$predict),2,var)
## I
ciI <- apply(as.matrix(FE_pred.I$predict),2,quantile,c(0.025,0.5,0.975))
ciEnvelope(meta.ds[[2]],ciI[1,],ciI[3,],col="violet")
lines(meta.ds[[2]],ciI[2,],col="darkGreen",lwd=2)
varI <- apply(as.matrix(FE_pred.I$predict),2,var)
plot(meta.ds[[2]],V.pred.sim.rel[1,],ylim=c(0,1),type='n',main="Via Simulation", ylab="Number of bison")
ciEnvelope(meta.ds[[2]],rep(0,ncol(V.pred.sim.rel)),V.pred.sim.rel[3,],col=stack.cols[1])
ciEnvelope(meta.ds[[2]],V.pred.sim.rel[3,],V.pred.sim.rel[2,],col=stack.cols[2])
ciEnvelope(meta.ds[[2]],V.pred.sim.rel[2,],V.pred.sim.rel[1,],col=stack.cols[3])
stack.cols = c("grey25","coral","lightblue","green")
stack.cols = c("grey25","coral","lightblue","green")
V.pred.sim.rel <- apply(rbind(varIPE,varIP,varI),2,function(x) {x/max(x)})
plot(meta.ds[[2]],V.pred.sim.rel[1,],ylim=c(0,1),type='n',main="Via Simulation", ylab="Number of bison")
ciEnvelope(meta.ds[[2]],rep(0,ncol(V.pred.sim.rel)),V.pred.sim.rel[3,],col=stack.cols[1])
ciEnvelope(meta.ds[[2]],V.pred.sim.rel[3,],V.pred.sim.rel[2,],col=stack.cols[2])
ciEnvelope(meta.ds[[2]],V.pred.sim.rel[2,],V.pred.sim.rel[1,],col=stack.cols[3])
plot(meta.ds[[2]],V.pred.sim.rel[1,],ylim=c(0,1),type='n',xlab="Time", ylab="Number of bison")
ciEnvelope(meta.ds[[2]],rep(0,ncol(V.pred.sim.rel)),V.pred.sim.rel[3,],col=stack.cols[1])
ciEnvelope(meta.ds[[2]],V.pred.sim.rel[3,],V.pred.sim.rel[2,],col=stack.cols[2])
ciEnvelope(meta.ds[[2]],V.pred.sim.rel[2,],V.pred.sim.rel[1,],col=stack.cols[3])
plot(meta.ds[[2]],V.pred.sim.rel[1,],ylim=c(0,1),type='n',xlab="Time", ylab="Proportion of uncertainty")
ciEnvelope(meta.ds[[2]],rep(0,ncol(V.pred.sim.rel)),V.pred.sim.rel[3,],col=stack.cols[1])
ciEnvelope(meta.ds[[2]],V.pred.sim.rel[3,],V.pred.sim.rel[2,],col=stack.cols[2])
ciEnvelope(meta.ds[[2]],V.pred.sim.rel[2,],V.pred.sim.rel[1,],col=stack.cols[3])
V.pred.sim.rel[2,]
V.pred.sim.rel[1,]
varIPE
var_rel_preds <- as.data.frame(V.pred.sim.rel)
var_rel_preds
var_rel_preds$variable <- rownames(var_rel_preds)
var_rel_preds <- as.data.frame(t(V.pred.sim.rel))
var_rel_preds
var_rel_preds$x <- c(1:nrow(var_rel_preds))
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=VarI, ymax=VarIP), color="black")+
geom_ribbon(aes(ymin=VarIP, ymax=VarIPE), color="red")
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=varI, ymax=varIP), color="black")
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), color="black")
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), color="black")+
geom_ribbon(aes(ymin=varI, ymax=varIP), color="coral")
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="gre25")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey25")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey25")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="lightblue")
var_rel_preds <- as.data.frame(t(V.pred.sim.rel))
var_rel_preds$x <- as.character(c(1:nrow(var_rel_preds)))
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey25")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="lightblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
theme_few()
####
####  Plot the proportion of uncertainty by partition
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel))
var_rel_preds$x <- 1:nrow(var_rel_preds)
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey25")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="lightblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
theme_few()
####
####  Plot the proportion of uncertainty by partition
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel))
var_rel_preds$x <- 1:nrow(var_rel_preds)
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey25")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="lightblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=c(1:10))+
theme_few()
####
####  Plot the proportion of uncertainty by partition
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel))
var_rel_preds$x <- 1:nrow(var_rel_preds)
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey25")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="lightblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=c(1:10))+
theme_few()
ggsave(filename = "../figures/bison_forecast_uncertainty.png", width = 4, height = 3, units = "in", dpi=120)
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey25")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="dodgerblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=c(1:10))+
theme_few()
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey25")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=c(1:10))+
theme_few()
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey35")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=c(1:10))+
theme_few()
ggsave(filename = "../figures/bison_forecast_uncertainty.png", width = 4, height = 3, units = "in", dpi=120)
setwd("~/Repos/ecocast_compare/code")
##  R script to fit a simple GLM for sagebrush percent cover,
##  forecast 10 new years, and partition the forecast variance.
##
##  Based on Dietze et al. (forthcoming)
##
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##  Date created: October 19, 2016
##
rm(list=ls(all.names = TRUE))
####
####  Load libraries
####
library(ggplot2)
library(ggthemes)
library(reshape2)
library(plyr)
library(rjags)
library(coda)
library(devtools)
# install_github("atredennick/ecoforecastR", force=TRUE) # get latest version
library(ecoforecastR)
####
####  Load data, aggregate to yearly values
####
sage_raw <- read.csv("../data/ARTR_quadratCover.csv")
sage_raw$year <- sage_raw$year+1900 # makes a calendar year
sage_dat <- ddply(sage_raw, .(year), summarise,
tot_cover = round(mean(totCover)/100)) # converts to percent cover, integer
clim_dat <- read.csv("../data/idaho_climate.csv")
## Merge observation and climate data
sage_climate_dat <- merge(sage_dat, clim_dat)
####
####  Fit forecasting GLM
####
my_model <- list(obs="tot_cover", fixed="~ppt1+TmeanSpr1", random=NULL, n.iter=5000)
fitted_model <- fit_dlm_pois(model=my_model, data=sage_climate_dat)
predictions <- rbind(fitted_model$predict[[1]],
fitted_model$predict[[2]],
fitted_model$predict[[3]])
median_predictions <- apply(predictions, MARGIN = 2, FUN = "median")
upper_predictions <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.975)})
lower_predictions <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.025)})
prediction_df <- data.frame(year = sage_climate_dat$year,
observation = sage_climate_dat$tot_cover,
median_prediction = median_predictions,
upper_prediction = upper_predictions,
lower_prediction = lower_predictions)
####
####  Plot the calibration data and predictions
####
pred_color <- "dodgerblue"
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_point(aes(y=observation))+
ylab("Cover of sagebrush (%)")+
xlab("Year")+
theme_few()
nens <- 1
nsteps <- 10
meta.ds <- list()
meta.ds[[1]] = 1:nens
meta.ds[[2]] = length(sage_climate_dat$year):(length(sage_climate_dat$year)+nsteps-1)
meta.ds[[3]] = c("Intercept")
newdata = array(1,dim = c(nens,nsteps,1), dimnames = "Intercept")
fit=fitted_model
n.iter=500
include="I"
steps=nsteps
start.time = NULL
## checks
if(n.iter < 1){
print("n.iter must be > 1")
return(NULL)
}
## set up variables
if(is.null(steps)){
if(is.null(newdata)){
print("either newdata or steps needs to be provided")
return(NULL)
} else {
steps = dim(newdata)[2]
}
}
if(!("D" %in% include)){
my.dims = dim(newdata)
my.dims[1] = 1
my.dimnames <- dimnames(newdata)
my.dimnames[[1]] = 1
newdata <- array(apply(newdata,3,apply,2,mean),
dim=my.dims,dimnames = my.dimnames)
}
params = as.matrix(fit$params)
if(!("P" %in% include)){
params <- as.matrix(apply(params,2,median))
}
if(ncol(params)==1) params <- t(params)
IC = as.matrix(fit$predict)
if(is.null(start.time)){
start.time = ncol(IC)
}
IC = IC[,start.time]
if(!("I" %in% include)){
IC = median(IC)
}
## set up storage
predict = matrix(NA,n.iter,steps)
## sample indices from newdata
index = data.frame(P = sample.int(nrow(params),n.iter,replace=TRUE),
D = sample.int(dim(newdata)[1],n.iter,replace=TRUE),
I = sample.int(length(IC),n.iter,replace=TRUE))
x = IC[index$I]
beta_IC = params[index$P,"beta_IC"]
# beta    = params[index$P,paste0("beta",dimnames(newdata)[[3]])]
if("E" %in% include){
shape = 1/sqrt(params[index$P,"shape"])  ## convert from precision to SD
} else {
shape = 0
}
if("E" %in% include){
shape = params[index$P,"shape"]  ## convert from precision to SD
} else {
shape = 0
}
## simulate
for(t in 1:steps){
Z  = newdata[index$D,t,]
mu = beta_IC*x #+ apply( Z * beta,1,sum)
x  = rgamma(n.iter,shape,shape/exp(mu))
predict[,t] = rpois(n.iter,x)
}
warnings()
x
shape
mu
x = IC[index$I]
t=1
Z  = newdata[index$D,t,]
mu = beta_IC*x #+ apply( Z * beta,1,sum)
mu
rpois(1,0.3)
## output
rpois(1,0.3)
rpois(1,exp(0.3))
exp(0.3)
exp(0.3)
exp(0.3)
exp(0.3)
exp(0.3)
rpois(1,exp(0.3))
rpois(1,exp(0.3))
rpois(1,exp(0.3))
rpois(1,exp(0.3))
rgamma(1,1)
rgamma(1)
rgamma(1,1)
rgamma(1,1,1)
rgamma(1,1,1)
rgamma(1,1,1)
rgamma(1,1)
rgamma(1,1)
rgamma(1,1)
rgamma(1,0)
rgamma(1,0)
rgamma(1,0,1)
rgamma(1,0,1)
rgamma(1,0,1)
rgamma(1,1,0)
rnorm(100,100,1)
rnorm(100,100,0)
rgamma(100,shape = 1, rate=1)
rgamma(100,shape = 2, rate=1)
rgamma(100,shape = 2, rate=10)
params[index$P,"shape"]
x = IC[index$I]
## simulate
for(t in 1:steps){
Z  = newdata[index$D,t,]
mu = beta_IC*x #+ apply( Z * beta,1,sum)
x  = rgamma(n.iter,shape,shape/exp(mu))
predict[,t] = rpois(n.iter,x)
}
warnings()
x = IC[index$I]
shape
shape = params[index$P,"shape"]  ## convert from precision to SD
x = IC[index$I]
## simulate
for(t in 1:steps){
Z  = newdata[index$D,t,]
mu = beta_IC*x #+ apply( Z * beta,1,sum)
x  = rgamma(n.iter,shape,shape/exp(mu))
predict[,t] = rpois(n.iter,x)
}
predict
shape/exp(mu)
x
setwd("~/Repos/ecoforecastR/R")
devtools::build()
devtools::document()
171/24
7.125*4
setwd("~/Repos/ecocast_compare/code")
source('~/Repos/ecocast_compare/code/bison_forecast.R', echo=TRUE)
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey35")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=c(1:nsteps))+
theme_few()
ggsave(filename = "../figures/bison_forecast_uncertainty.png", width = 4, height = 3, units = "in", dpi=120)
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey35")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,nsteps,by=2))+
theme_few()
ggsave(filename = "../figures/bison_forecast_uncertainty.png", width = 4, height = 3, units = "in", dpi=120)
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey35")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,nsteps,by=5))+
theme_few()
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey35")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,nsteps,by=4))+
theme_few()
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey35")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,nsteps,by=3))+
theme_few()
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey35")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,nsteps,by=1))+
theme_few()
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey35")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey35")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
# scale_x_continuous(breaks=seq(1,nsteps,by=1))+
theme_few()
ggsave(filename = "../figures/bison_forecast_uncertainty.png", width = 4, height = 3, units = "in", dpi=120)
ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varI), fill="grey35")+
geom_ribbon(aes(ymin=varI, ymax=varIP), fill="coral")+
geom_ribbon(aes(ymin=varIP, ymax=varIPE), fill="skyblue")+
ylab("Proportion of uncertainty")+
xlab("Forecast steps")+
# scale_x_continuous(breaks=seq(1,nsteps,by=1))+
theme_few()+
scale_color_manual(name="", values=c("grey35","coral","skyblue"))
##  R script to fit a simple GLM for sagebrush percent cover,
##  forecast 10 new years, and partition the forecast variance.
##
##  Based on Dietze et al. (forthcoming)
##
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##  Date created: October 19, 2016
##
rm(list=ls(all.names = TRUE))
####
####  Load libraries
####
library(ggplot2)
library(ggthemes)
library(reshape2)
library(plyr)
library(rjags)
library(coda)
library(devtools)
library(rnoaa)
library(ncdf4)
# install_github("atredennick/ecoforecastR", force=TRUE) # get latest version
library(ecoforecastR)
####
####  Load data, aggregate to yearly values
####
bison_raw <- read.csv("../data/YNP_bison_population_size.csv", row.names = 1)
bison_dat <- bison_raw[,2:ncol(bison_raw)]
##  Load snotel data, aggregate to get average snow depth by year
snotel_raw <- read.csv("../data/west_yellowstone_snotel.csv", na.strings = "", stringsAsFactors = FALSE)
snotel_raw <- snotel_raw[2:nrow(snotel_raw), ] # removes id row
snotel_dat <- melt(snotel_raw, id.vars = c("Water.Year","Day"))
snotel_dat$value <- as.numeric(snotel_dat$value)
snotel_means <- ddply(snotel_dat, .(Water.Year), summarise,
avg_snow = mean(value))
## Merge observation and climate data
bison_climate_dat <- merge(bison_dat, snotel_means, by.x = "year", by.y="Water.Year")
##  Retrieve climate data from NOAA for forecasts
####
####  Fit forecasting GLM
####
my_model <- list(obs="count.mean", fixed=NULL, random=NULL, n.iter=10000)
fitted_model <- fit_dlm_lnorm(model=my_model, data=bison_climate_dat)
predictions <- rbind(fitted_model$predict[[1]],
fitted_model$predict[[2]],
fitted_model$predict[[3]])
median_predictions <- apply(predictions, MARGIN = 2, FUN = "median")
upper_predictions <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.975)})
lower_predictions <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.025)})
prediction_df <- data.frame(year = bison_dat$year,
observation = bison_dat$count.mean,
median_prediction = exp(median_predictions),
upper_prediction = exp(upper_predictions),
lower_prediction = exp(lower_predictions))
# params <- as.data.frame(rbind(fitted_model$params[[1]],
#                               fitted_model$params[[2]],
#                               fitted_model$params[[3]]))
####
####  Plot the calibration data and predictions
####
pred_color <- "dodgerblue"
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_point(aes(y=observation))+
ylab("Number of bison")+
xlab("Year")+
theme_few()
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color="white", size=2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_point(aes(y=observation))+
ylab("Number of bison")+
xlab("Year")+
theme_few()
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color="white", size=2)+
geom_line(aes(y=median_prediction), color=pred_color, size=1.4)+
geom_point(aes(y=observation))+
ylab("Number of bison")+
xlab("Year")+
theme_few()
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color="white", size=2)+
geom_line(aes(y=median_prediction), color=pred_color, size=1)+
geom_point(aes(y=observation))+
ylab("Number of bison")+
xlab("Year")+
theme_few()
ggsave(filename = "../figures/bison_calibration.png", width = 4, height = 3, units = "in", dpi=120)
ggplot(prediction_df, aes(x=year))+
geom_ribbon(aes(ymax=upper_prediction, ymin=lower_prediction), fill=pred_color, color=NA, alpha=0.2)+
geom_line(aes(y=median_prediction), color=pred_color)+
geom_point(aes(y=observation))+
ylab("Number of bison")+
xlab("Year")+
theme_few()
ggsave(filename = "../figures/bison_calibration.png", width = 4, height = 3, units = "in", dpi=120)
rstan()
library(rstan)
