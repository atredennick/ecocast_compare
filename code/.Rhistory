panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"))
####
####  LOAD DATA ----------------------------------------------------------------
####
snow_ynp  <- read.csv("../data/west_yellowstone_snotel_summary.csv") %>%
select(-X)
bison_raw <- read.csv("../data/YNP_bison_population_size.csv", row.names = 1)
bison_dat <- bison_raw %>%
dplyr::select(-index) %>%
left_join(snow_ynp, by="year")
####
####  PLOT BISON AND SNOW DATA -------------------------------------------------
####
plot_data <- bison_dat %>%
dplyr::select(year, count.mean, count.sd, mean_snow_water_equiv_mm) %>%
dplyr::rename(avg_swe = mean_snow_water_equiv_mm)
bison_growth_data <- bison_dat %>%
dplyr::select(year, count.mean) %>%
mutate(id = 1)
bison_growth_data$growth_rate <- ave(bison_growth_data$count.mean, bison_growth_data$id, FUN=function(x) c(0, diff(log(x))))
docolor <- "#278DAF"
bison_plot <- ggplot(plot_data, aes(x = year, y = count.mean))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
geom_errorbar(aes(ymin = count.mean-count.sd, ymax = count.mean+count.sd), width=0.5, size=0.5, color = docolor)+
ylab("Number of bison")+
xlab("Year")+
my_theme
bison_growth <- ggplot(bison_growth_data, aes(x = year, y = growth_rate))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
ylab("Population growth rate (r)")+
xlab("Year")+
my_theme
snow_plot <- ggplot(plot_data, aes(x = year, y = avg_swe))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
ylab("Accumlated\nsnow water equivalent (mm)")+
xlab("Year")+
my_theme
plot_grid(bison_plot, bison_growth, snow_plot, labels = "AUTO", ncol = 3)
ggsave(filename = "../figures/bison_data_plots.png", height = 3, width = 10, units = "in", dpi = 120)
####
####  JAGS State-Space Model ---------------------------------------------------
####
my_model <- "
model{
#### Variance Priors
sigma_proc ~ dunif(0,10)
tau_proc <- 1/sigma_proc^2
#### Fixed Effects Priors
r ~ dnorm(0.234, 1/0.136^2)
b ~ dnorm(0,0.0001)
b1 ~ dnorm(0,0.0001)
#### Initial Conditions
z[1] ~ dnorm(Nobs[1], tau_obs[1])
#### Process Model
for(t in 2:npreds){
mu[t] <- max( 1, log( z[t-1]*exp(r + b*z[t-1] + b1*x[t]) ) )
z[t] ~ dlnorm(mu[t], tau_proc)
}
#### Data Model
##  SD observations
for(j in 2:n){
Nobs[j] ~ dnorm(z[j], tau_obs[j])
}
}"
####
####  Fit Bison Forecasting Model ----------------------------------------------
####
##  For years without observation error, set to max observed standard deviation
na_sds <- which(is.na(bison_dat$count.sd)==T)
bison_dat[na_sds,"count.sd"] <- max(bison_dat$count.sd, na.rm=T)
##  Prepare data list
mydat         <- list(Nobs = bison_dat$count.mean, # mean counts
n = nrow(bison_dat), # number of observations
tau_obs = 1/bison_dat$count.sd^2, # transform s.d. to precision
x = c(as.numeric(scale(bison_dat$mean_snow_water_equiv_mm)),
rep(0,10)), # snow depth, plus ten years at avg depth (0, since standardized)
npreds = nrow(bison_dat)+10) # number of total predictions (obs + forecast)
out_variables <- c("r","b","b1","sigma_proc","z")
##  Send to JAGS
mc3     <- jags.model(file=textConnection(my_model), data=mydat, n.chains=3)
update(mc3, n.iter = 5000)
mc3.out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=5000)
summary(mc3.out)$stat
summary(mc3.out)$quantile
## Split output
out          <- list(params=NULL, predict=NULL, model=my_model,data=mydat)
mfit         <- as.matrix(mc3.out,chains=TRUE)
pred.cols    <- union(grep("z[",colnames(mfit),fixed=TRUE),grep("mu[",colnames(mfit),fixed=TRUE))
chain.col    <- which(colnames(mfit)=="CHAIN")
out$predict  <- mat2mcmc.list(mfit[,c(chain.col,pred.cols)])
out$params   <- mat2mcmc.list(mfit[,-pred.cols])
fitted_model <- out
## Collate predictions
bison_dat[na_sds,"count.sd"] <- NA # set the unobserved std. devs. back to NA for plotting
predictions        <- rbind(fitted_model$predict[[1]],
fitted_model$predict[[2]],
fitted_model$predict[[3]])
median_predictions <- apply(predictions, MARGIN = 2, FUN = "median")
upper_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.975)})
lower_predictions  <- apply(predictions, MARGIN = 2, FUN = function(x){quantile(x, probs = 0.025)})
prediction_df      <- data.frame(year = c(bison_dat$year, (max(bison_dat$year)+1):(max(bison_dat$year)+10)),
observation = c(bison_dat$count.mean,rep(NA,10)),
upper_observation = c(bison_dat$count.mean+bison_dat$count.sd,rep(NA,10)),
lower_observation = c(bison_dat$count.mean-bison_dat$count.sd,rep(NA,10)),
median_prediction = median_predictions,
upper_prediction = upper_predictions,
lower_prediction = lower_predictions)
##  Check parameter chains for convergence and mixing
# plot(fitted_model$params)
# gelman.diag(fitted_model$params)
# heidel.diag(fitted_model$params)
####
####  PLOT POSTERIOR DISTRIBUTIONS OF PARAMETERS -------------------------------
####
post_params <- as.data.frame(as.matrix(fitted_model$params))
post_params$iteration <- 1:nrow(post_params)
post_params <- post_params %>%
gather(key = parameter, value = estimate, -iteration)
ggplot(post_params, aes(x = estimate, y = ..density..))+
geom_histogram(fill = docolor, color = "white", bins = 20)+
facet_wrap(~parameter, scales = "free", ncol = 4)+
ylab("Posterior density")+
xlab("Parameter estimate")+
my_theme
source('~/Repos/ecocast_compare/code/bison_forecast.R')
docolor <- "#278DAF"
bison_plot <- ggplot(plot_data, aes(x = year, y = count.mean))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
geom_errorbar(aes(ymin = count.mean-count.sd, ymax = count.mean+count.sd), width=0.5, size=0.5, color = docolor)+
ylab("Number of bison")+
xlab("Year")+
my_theme
bison_growth <- ggplot(bison_growth_data, aes(x = year, y = growth_rate))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
ylab("Population growth rate (r)")+
xlab("Year")+
my_theme
snow_plot <- ggplot(plot_data, aes(x = year, y = avg_swe))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
ylab("Mean SWE (mm)")+
xlab("Year")+
my_theme
plot_grid(bison_plot, bison_growth, snow_plot, labels = "AUTO", ncol = 3)
ggsave(filename = "../figures/bison_data_plots.png", height = 3, width = 10, units = "in", dpi = 120)
plot(plot_data$avg_swe, bison_growth_data$growth_rate)
mydat
log(0.3)
exp(0.3)
log(1.1)
hist(rnorm(1000,0.1,0.135))
r_sd_prior <- sd(log(rnorm(100000,1.11,0.024)))
r_sd_prior
log(1.11)
source('~/Repos/ecocast_compare/code/bison_forecast.R')
head(post_params)
post_params <- as.data.frame(as.matrix(fitted_model$params))
post_params$iteration <- 1:nrow(post_params)
head(post_params)
post_params <- post_params %>%
gather(key = parameter, value = estimate, -iteration)
head(post_params)
unique(post_params$parameter)
max_iters <- nrow(post_params)
post_params$iteration <- 1:max_iters
max_iters
post_params <- as.data.frame(as.matrix(fitted_model$params))
max_iters <- nrow(post_params)
post_params$iteration <- 1:max_iters
max_iters
####
post_params <- as.data.frame(as.matrix(fitted_model$params))
max_iters <- nrow(post_params)
post_params$iteration <- 1:max_iters
post_params <- post_params %>%
gather(key = parameter, value = estimate, -iteration) %>%
mutate(prior = c(rnorm(max_iters,0,10000), # b prior
rnorm(max_iters,0,10000), # b1 prior
rnorm(max_iters,r_mu_prior,r_sd_prior), # r prior
runif(max_iters,0,10))) # sd prior
ggplot(post_params, aes(x = estimate, y = ..density..))+
geom_histogram(fill = docolor, color = "white", bins = 20)+
geom_line(aes(x = prior))+
facet_wrap(~parameter, scales = "free", ncol = 4)+
ylab("Posterior density")+
xlab("Parameter estimate")+
my_theme
ggplot(post_params, aes(x = estimate, y = ..density..))+
geom_histogram(fill = docolor, color = "white", bins = 20)+
# geom_line(aes(x = prior))+
facet_wrap(~parameter, scales = "free", ncol = 4)+
ylab("Posterior density")+
xlab("Parameter estimate")+
my_theme
ggplot(post_params, aes(x = estimate, y = ..density..))+
geom_histogram(fill = docolor, color = "white", bins = 20)+
geom_line(aes(x = prior), stat = "density")+
facet_wrap(~parameter, scales = "free", ncol = 4)+
ylab("Posterior density")+
xlab("Parameter estimate")+
my_theme
ggplot(post_params, aes(x = estimate, y = ..density..))+
geom_histogram(fill = docolor, color = "white", bins = 20)+
geom_line(data = filter(post_params, parameter == "r"),aes(x = prior), stat = "density")+
facet_wrap(~parameter, scales = "free", ncol = 4)+
ylab("Posterior density")+
xlab("Parameter estimate")+
my_theme
prior_col <- "#CF4C26"
ggplot(post_params, aes(x = estimate, y = ..density..))+
geom_histogram(fill = docolor, color = "white", bins = 20)+
geom_line(data = filter(post_params, parameter == "r"),aes(x = prior), stat = "density", color = prior_col)+
facet_wrap(~parameter, scales = "free", ncol = 4)+
ylab("Posterior density")+
xlab("Parameter estimate")+
my_theme
ggsave(filename = "../figures/bison_post_params.png", height = 3, width = 10, units = "in", dpi = 120)
################################################################################
##  bison_forecast.R: R script to fit a population growth model for YNP,
##  forecast 10 new years, and partition the forecast variance.
##
##  Based on Dietze 2017, Ecological Applications
##  http://onlinelibrary.wiley.com/doi/10.1002/eap.1589/full
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##  Date created: October 19, 2016
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location...
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
####
####  LOAD LIBRARIES ----
####
library(tidyverse)
library(dplyr)
library(ggthemes)
library(cowplot)
library(rjags)
library(coda)
# library(devtools)
# install_github("atredennick/ecoforecastR") # get latest version
library(ecoforecastR)
####
####  SET MY PLOTTING THEME ----------------------------------------------------
####
my_theme <- theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"))
####
####  LOAD DATA ----------------------------------------------------------------
####
snow_ynp  <- read.csv("../data/west_yellowstone_snotel_summary.csv") %>%
select(-X)
bison_raw <- read.csv("../data/YNP_bison_population_size.csv", row.names = 1)
bison_dat <- bison_raw %>%
dplyr::select(-index) %>%
left_join(snow_ynp, by="year")
####
####  PLOT BISON AND SNOW DATA -------------------------------------------------
####
plot_data <- bison_dat %>%
dplyr::select(year, count.mean, count.sd, mean_snow_water_equiv_mm) %>%
dplyr::rename(avg_swe = mean_snow_water_equiv_mm)
bison_growth_data <- bison_dat %>%
dplyr::select(year, count.mean) %>%
mutate(id = 1)
bison_growth_data$growth_rate <- ave(bison_growth_data$count.mean, bison_growth_data$id, FUN=function(x) c(0, diff(log(x))))
docolor <- "#278DAF"
bison_plot <- ggplot(plot_data, aes(x = year, y = count.mean))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
geom_errorbar(aes(ymin = count.mean-count.sd, ymax = count.mean+count.sd), width=0.5, size=0.5, color = docolor)+
ylab("Number of bison")+
xlab("Year")+
my_theme
bison_growth <- ggplot(bison_growth_data, aes(x = year, y = growth_rate))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
ylab("Population growth rate (r)")+
xlab("Year")+
my_theme
snow_plot <- ggplot(plot_data, aes(x = year, y = avg_swe))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
ylab("Mean SWE (mm)")+
xlab("Year")+
my_theme
plot_grid(bison_plot, bison_growth, snow_plot, labels = "AUTO", ncol = 3)
ggsave(filename = "../figures/bison_data_plots.png", height = 3, width = 10, units = "in", dpi = 120)
####
####  JAGS State-Space Model ---------------------------------------------------
####
r_mu_prior <- log(1.11) # lambda = 1.11 in Hobbs et al. 2015
r_sd_prior <- sd(log(rnorm(100000,1.11,0.024))) # sd_lambda = 0.024 in Hobbs et al. 2015
my_model <- "
model{
#### Variance Priors
sigma_proc ~ dunif(0,10)
tau_proc <- 1/sigma_proc^2
#### Fixed Effects Priors
r ~ dnorm(0.1, 1/0.02^2)
b ~ dnorm(0,0.0001)
b1 ~ dnorm(0,0.0001)
#### Initial Conditions
z[1] ~ dnorm(Nobs[1], tau_obs[1])
#### Process Model
for(t in 2:npreds){
mu[t] <- max( 1, log( z[t-1]*exp(r + b*z[t-1] + b1*x[t]) ) )
z[t] ~ dlnorm(mu[t], tau_proc)
}
#### Data Model
##  SD observations
for(j in 2:n){
Nobs[j] ~ dnorm(z[j], tau_obs[j])
}
####  Derived Quantities
K <- 1/r*b
}"
####
####  Fit Bison Forecasting Model ----------------------------------------------
####
##  For years without observation error, set to max observed standard deviation
na_sds <- which(is.na(bison_dat$count.sd)==T)
bison_dat[na_sds,"count.sd"] <- max(bison_dat$count.sd, na.rm=T)
##  Prepare data list
mydat         <- list(Nobs = bison_dat$count.mean, # mean counts
n = nrow(bison_dat), # number of observations
tau_obs = 1/bison_dat$count.sd^2, # transform s.d. to precision
x = c(as.numeric(scale(bison_dat$mean_snow_water_equiv_mm)),
rep(0,10)), # snow depth, plus ten years at avg depth (0, since standardized)
npreds = nrow(bison_dat)+10) # number of total predictions (obs + forecast)
out_variables <- c("r","b","b1","sigma_proc","z","K")
##  Send to JAGS
mc3     <- jags.model(file=textConnection(my_model), data=mydat, n.chains=3)
update(mc3, n.iter = 5000)
mc3.out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=5000)
summary(mc3.out)$stat
summary(mc3.out)$quantile
################################################################################
##  bison_forecast.R: R script to fit a population growth model for YNP,
##  forecast 10 new years, and partition the forecast variance.
##
##  Based on Dietze 2017, Ecological Applications
##  http://onlinelibrary.wiley.com/doi/10.1002/eap.1589/full
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##  Date created: October 19, 2016
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location...
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
####
####  LOAD LIBRARIES ----
####
library(tidyverse)
library(dplyr)
library(ggthemes)
library(cowplot)
library(rjags)
library(coda)
# library(devtools)
# install_github("atredennick/ecoforecastR") # get latest version
library(ecoforecastR)
####
####  SET MY PLOTTING THEME ----------------------------------------------------
####
my_theme <- theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"))
####
####  LOAD DATA ----------------------------------------------------------------
####
snow_ynp  <- read.csv("../data/west_yellowstone_snotel_summary.csv") %>%
select(-X)
bison_raw <- read.csv("../data/YNP_bison_population_size.csv", row.names = 1)
bison_dat <- bison_raw %>%
dplyr::select(-index) %>%
left_join(snow_ynp, by="year")
####
####  PLOT BISON AND SNOW DATA -------------------------------------------------
####
plot_data <- bison_dat %>%
dplyr::select(year, count.mean, count.sd, mean_snow_water_equiv_mm) %>%
dplyr::rename(avg_swe = mean_snow_water_equiv_mm)
bison_growth_data <- bison_dat %>%
dplyr::select(year, count.mean) %>%
mutate(id = 1)
bison_growth_data$growth_rate <- ave(bison_growth_data$count.mean, bison_growth_data$id, FUN=function(x) c(0, diff(log(x))))
docolor <- "#278DAF"
bison_plot <- ggplot(plot_data, aes(x = year, y = count.mean))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
geom_errorbar(aes(ymin = count.mean-count.sd, ymax = count.mean+count.sd), width=0.5, size=0.5, color = docolor)+
ylab("Number of bison")+
xlab("Year")+
my_theme
bison_growth <- ggplot(bison_growth_data, aes(x = year, y = growth_rate))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
ylab("Population growth rate (r)")+
xlab("Year")+
my_theme
snow_plot <- ggplot(plot_data, aes(x = year, y = avg_swe))+
geom_line(color = docolor, alpha = 0.6)+
geom_point(size=1.5, color = docolor)+
ylab("Mean SWE (mm)")+
xlab("Year")+
my_theme
plot_grid(bison_plot, bison_growth, snow_plot, labels = "AUTO", ncol = 3)
ggsave(filename = "../figures/bison_data_plots.png", height = 3, width = 10, units = "in", dpi = 120)
####
####  JAGS State-Space Model ---------------------------------------------------
####
r_mu_prior <- log(1.11) # lambda = 1.11 in Hobbs et al. 2015
r_sd_prior <- sd(log(rnorm(100000,1.11,0.024))) # sd_lambda = 0.024 in Hobbs et al. 2015
my_model <- "
model{
#### Variance Priors
sigma_proc ~ dunif(0,10)
tau_proc <- 1/sigma_proc^2
#### Fixed Effects Priors
r ~ dnorm(0.1, 1/0.02^2)
b ~ dnorm(0,0.0001)
b1 ~ dnorm(0,0.0001)
#### Initial Conditions
z[1] ~ dnorm(Nobs[1], tau_obs[1])
#### Process Model
for(t in 2:npreds){
mu[t] <- max( 1, log( z[t-1]*exp(r + b*z[t-1] + b1*x[t]) ) )
z[t] ~ dlnorm(mu[t], tau_proc)
}
#### Data Model
##  SD observations
for(j in 2:n){
Nobs[j] ~ dnorm(z[j], tau_obs[j])
}
####  Derived Quantities
K <- r/b
}"
####
####  Fit Bison Forecasting Model ----------------------------------------------
####
##  For years without observation error, set to max observed standard deviation
na_sds <- which(is.na(bison_dat$count.sd)==T)
bison_dat[na_sds,"count.sd"] <- max(bison_dat$count.sd, na.rm=T)
##  Prepare data list
mydat         <- list(Nobs = bison_dat$count.mean, # mean counts
n = nrow(bison_dat), # number of observations
tau_obs = 1/bison_dat$count.sd^2, # transform s.d. to precision
x = c(as.numeric(scale(bison_dat$mean_snow_water_equiv_mm)),
rep(0,10)), # snow depth, plus ten years at avg depth (0, since standardized)
npreds = nrow(bison_dat)+10) # number of total predictions (obs + forecast)
out_variables <- c("r","b","b1","sigma_proc","z","K")
##  Send to JAGS
mc3     <- jags.model(file=textConnection(my_model), data=mydat, n.chains=3)
update(mc3, n.iter = 5000)
mc3.out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=5000)
summary(mc3.out)$stat
source('~/Repos/ecocast_compare/code/bison_forecast.R')
mc3     <- jags.model(file=textConnection(my_model), data=mydat, n.chains=3)
update(mc3, n.iter = 5000)
mc3.out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=5000)
summary(mc3.out)$stat
0.18 / -4
0.18 / 0
0.18 / -0.00005
0.18 / 0.00005
0.1/0.01
0.0001
0.01
0.1/0.01
0.1/0.001
0.1/0.0001
source('~/Repos/ecocast_compare/code/bison_forecast.R')
source('~/Repos/ecocast_compare/code/bison_forecast.R')
source('~/Repos/ecocast_compare/code/bison_forecast.R')
