##  Initial conditions, parameter, and driver uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- params[sample_params,"sigma_proc"]
zsamps         <- sample(x = ncol(gcm_precip[2:ncol(gcm_precip)]), size = num_iters, replace = TRUE)
z              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = as.numeric(z[t,zsamps]), r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varIPD <- apply(forecasts,2,var)
##  Initial conditions, parameter, driver, and process uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[4,3]
z              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = as.numeric(z[t,zsamps]), r, b, b1, sd_proc = sd_proc)
forecasts[,t] <- x
}
varIPDE <- apply(forecasts,2,var)
V.pred.sim     <- rbind(varIPDE,varIPD,varIP,varI)
V.pred.sim.rel <- apply(V.pred.sim,2,function(x) {x/max(x)})
####
####  PLOT THE FORECASTING UNCERTAINTY PARTITION -------------------------------
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel*100))
var_rel_preds$x <- 1:nrow(var_rel_preds)
my_cols <- c("#0A4D5B", "#139AB8", "#39B181","grey")
my_cols <- c("black", "grey55", "grey70","grey90")
variance_plot <- ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varIPDE), fill=my_cols[4])+
geom_ribbon(aes(ymin=0, ymax=varIPD), fill=my_cols[3])+
geom_ribbon(aes(ymin=0, ymax=varIP), fill=my_cols[2])+
geom_ribbon(aes(ymin=0, ymax=varI), fill=my_cols[1])+
ylab("Percent of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,forecast_steps,by=1),
labels=paste(seq(1,forecast_steps,by=1), "yrs"))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"))+
theme_few()
####
####  COMBINE PLOTS AND SAVE ---------------------------------------------------
####
plot_grid(calibration_plot, variance_plot, nrow = 2, labels = "AUTO")
ggsave(filename = "../figures/bison_combined.png",
width = 4,
height = 6,
units = "in",
dpi =200)
source('~/Repos/ecocast_compare/code/bison_forecast.R', echo=TRUE)
####
####  SET UP GCM PROJECTION MATRIX ---------------------------------------------
####
# Set up column names for GCM projection file
col_names <- c("year",
"month",
"day",
as.character(as.data.frame(read.table("../data/CMIP_YNP/bcca5/COLS_pr.txt"))[,1])
)
# Read in GCM projections and format as matrix
gcm_precip <- read_csv("../data/CMIP_YNP/bcca5/pr.csv", col_names = col_names) %>%
gather(key = model, value = ppt, -year, -month, -day) %>%
separate(model, into = c("model_name", "rep", "scenario"), sep = "[.]") %>%
group_by(year, month, model_name, scenario) %>%
summarise(total_ppt_mm = sum(ppt),
total_ppt_in = total_ppt_mm*0.0393701) %>%
ungroup() %>%
dplyr::filter(month == 1) %>%
dplyr::filter(year %in% c(2011,2012,2013,2014,2015,2016,2017)) %>%
dplyr::select(model_name, scenario, year, month, total_ppt_mm, total_ppt_in) %>%
dplyr::arrange(model_name, scenario, year, month) %>%
dplyr::mutate(stdzd_precip = (total_ppt_in-ppt_mean) / ppt_sd) %>%
dplyr::mutate(model_rcp = paste(model_name, scenario,"::")) %>%
dplyr::select(model_rcp, year, stdzd_precip) %>%
spread(model_rcp, stdzd_precip)
# length(which(gcm_precip$scenario == "rcp85"))
####
####  PARTITION FORECAST UNCERTAINTY -------------------------------------------
####
##  Function for the ecological process (Gompertz population growth)
iterate_process <- function(Nnow, xnow, r, b, b1, sd_proc) {
xnow[xnow>5] <- 5
mu <- log(Nnow) + r + b*log(Nnow) + b1*xnow # determinstic process; log scale
zlog <- rnorm(length(mu), mu, sd_proc) # stochastic process; log scale
N <- exp(zlog) # back transform to arithmetic scale
}
##  Initial condition uncertainty: make forecasts from all MCMC iterations of
##    the final year, but use mean parameter values and no process error.
forecast_steps <- 7
num_iters      <- 50000
x              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
param_summary  <- summary(fitted_model$params)$quantile
r              <- param_summary[3,3]
b              <- param_summary[1,3]
b1             <- param_summary[2,3]
sd_proc        <- param_summary[4,3]
z              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = z[t], r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varI <- apply(forecasts,2,var)
##  Initial conditions and parameter uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
sample_params  <- sample.int(nrow(params), size = num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[4,3]
z              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = z[t], r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varIP <- apply(forecasts,2,var)
##  Initial conditions, parameter, and driver uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- params[sample_params,"sigma_proc"]
zsamps         <- sample(x = ncol(gcm_precip[2:ncol(gcm_precip)]), size = num_iters, replace = TRUE)
z              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = as.numeric(z[t,zsamps]), r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varIPD <- apply(forecasts,2,var)
##  Initial conditions, parameter, driver, and process uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[4,3]
z              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = as.numeric(z[t,zsamps]), r, b, b1, sd_proc = sd_proc)
forecasts[,t] <- x
}
varIPDE <- apply(forecasts,2,var)
V.pred.sim     <- rbind(varIPDE,varIPD,varIP,varI)
V.pred.sim.rel <- apply(V.pred.sim,2,function(x) {x/max(x)})
####
####  PLOT THE FORECASTING UNCERTAINTY PARTITION -------------------------------
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel*100))
var_rel_preds$x <- 1:nrow(var_rel_preds)
my_cols <- c("#0A4D5B", "#139AB8", "#39B181","grey")
my_cols <- c("black", "grey55", "grey70","grey90")
variance_plot <- ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varIPDE), fill=my_cols[4])+
geom_ribbon(aes(ymin=0, ymax=varIPD), fill=my_cols[3])+
geom_ribbon(aes(ymin=0, ymax=varIP), fill=my_cols[2])+
geom_ribbon(aes(ymin=0, ymax=varI), fill=my_cols[1])+
ylab("Percent of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,forecast_steps,by=1),
labels=paste(seq(1,forecast_steps,by=1), "yrs"))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"))+
theme_few()
####
####  COMBINE PLOTS AND SAVE ---------------------------------------------------
####
plot_grid(calibration_plot, variance_plot, nrow = 2, labels = "AUTO")
ggsave(filename = "../figures/bison_combined.png",
width = 4,
height = 6,
units = "in",
dpi =200)
####
####  SET UP GCM PROJECTION MATRIX ---------------------------------------------
####
# Set up column names for GCM projection file
col_names <- c("year",
"month",
"day",
as.character(as.data.frame(read.table("../data/CMIP_YNP/bcca5/COLS_pr.txt"))[,1])
)
# Read in GCM projections and format as matrix
gcm_precip <- read_csv("../data/CMIP_YNP/bcca5/pr.csv", col_names = col_names) %>%
gather(key = model, value = ppt, -year, -month, -day) %>%
separate(model, into = c("model_name", "rep", "scenario"), sep = "[.]") %>%
group_by(year, month, model_name, scenario) %>%
summarise(total_ppt_mm = sum(ppt),
total_ppt_in = total_ppt_mm*0.0393701) %>%
ungroup() %>%
dplyr::filter(month == 1) %>%
dplyr::filter(year %in% c(2011,2012,2013,2014,2015,2016,2017)) %>%
dplyr::select(model_name, scenario, year, month, total_ppt_mm, total_ppt_in) %>%
dplyr::arrange(model_name, scenario, year, month) %>%
dplyr::mutate(stdzd_precip = (total_ppt_in-ppt_mean) / ppt_sd) %>%
dplyr::mutate(model_rcp = paste(model_name, scenario,"::")) %>%
dplyr::select(model_rcp, year, stdzd_precip) %>%
spread(model_rcp, stdzd_precip)
# length(which(gcm_precip$scenario == "rcp85"))
####
####  PARTITION FORECAST UNCERTAINTY -------------------------------------------
####
##  Function for the ecological process (Gompertz population growth)
iterate_process <- function(Nnow, xnow, r, b, b1, sd_proc) {
xnow[xnow>5] <- 5
mu <- log(Nnow) + r + b*log(Nnow) + b1*xnow # determinstic process; log scale
zlog <- rnorm(length(mu), mu, sd_proc) # stochastic process; log scale
N <- exp(zlog) # back transform to arithmetic scale
}
##  Initial condition uncertainty: make forecasts from all MCMC iterations of
##    the final year, but use mean parameter values and no process error.
forecast_steps <- 7
num_iters      <- 50000
x              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
param_summary  <- summary(fitted_model$params)$quantile
r              <- param_summary[3,3]
b              <- param_summary[1,3]
b1             <- param_summary[2,3]
sd_proc        <- param_summary[4,3]
z              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = z[t], r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varI <- apply(forecasts,2,var)
##  Initial conditions and parameter uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
sample_params  <- sample.int(nrow(params), size = num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[4,3]
z              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = z[t], r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varIP <- apply(forecasts,2,var)
##  Initial conditions, parameter, and driver uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- params[sample_params,"sigma_proc"]
zsamps         <- sample(x = ncol(gcm_precip[2:ncol(gcm_precip)]), size = num_iters, replace = TRUE)
z              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = as.numeric(z[t,zsamps]), r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varIPD <- apply(forecasts,2,var)
##  Initial conditions, parameter, driver, and process uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[4,3]
z              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = as.numeric(z[t,zsamps]), r, b, b1, sd_proc = sd_proc)
forecasts[,t] <- x
}
varIPDE <- apply(forecasts,2,var)
V.pred.sim     <- rbind(varIPDE,varIPD,varIP,varI)
V.pred.sim.rel <- apply(V.pred.sim,2,function(x) {x/max(x)})
####
####  PLOT THE FORECASTING UNCERTAINTY PARTITION -------------------------------
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel*100))
var_rel_preds$x <- 1:nrow(var_rel_preds)
my_cols <- c("#0A4D5B", "#139AB8", "#39B181","grey")
my_cols <- c("black", "grey55", "grey70","grey90")
variance_plot <- ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varIPDE), fill=my_cols[4])+
geom_ribbon(aes(ymin=0, ymax=varIPD), fill=my_cols[3])+
geom_ribbon(aes(ymin=0, ymax=varIP), fill=my_cols[2])+
geom_ribbon(aes(ymin=0, ymax=varI), fill=my_cols[1])+
ylab("Percent of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,forecast_steps,by=1),
labels=paste(seq(1,forecast_steps,by=1), "yrs"))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"))+
theme_few()
####
####  COMBINE PLOTS AND SAVE ---------------------------------------------------
####
plot_grid(calibration_plot, variance_plot, nrow = 2, labels = "AUTO")
ggsave(filename = "../figures/bison_combined.png",
width = 4,
height = 6,
units = "in",
dpi =200)
source('~/Repos/ecocast_compare/code/bison_forecast.R', echo=TRUE)
####
####  PARTITION FORECAST UNCERTAINTY -------------------------------------------
####
##  Function for the ecological process (Gompertz population growth)
iterate_process <- function(Nnow, xnow, r, b, b1, sd_proc) {
xnow[xnow>5] <- 5
mu <- log(Nnow) + r + b*log(Nnow) + b1*xnow # determinstic process; log scale
zlog <- rnorm(length(mu), mu, sd_proc) # stochastic process; log scale
N <- exp(zlog) # back transform to arithmetic scale
}
##  Initial condition uncertainty: make forecasts from all MCMC iterations of
##    the final year, but use mean parameter values and no process error.
forecast_steps <- 7
num_iters      <- 50000
x              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
param_summary  <- summary(fitted_model$params)$quantile
r              <- param_summary[3,3]
b              <- param_summary[1,3]
b1             <- param_summary[2,3]
sd_proc        <- param_summary[4,3]
z              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = z[t], r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varI <- apply(forecasts,2,var)
##  Initial conditions and parameter uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
sample_params  <- sample.int(nrow(params), size = num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[4,3]
z              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = z[t], r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varIP <- apply(forecasts,2,var)
##  Initial conditions, parameter, and driver uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- params[sample_params,"sigma_proc"]
zsamps         <- sample(x = ncol(gcm_precip[2:ncol(gcm_precip)]), size = num_iters, replace = TRUE)
z              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = as.numeric(z[t,zsamps]), r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varIPD <- apply(forecasts,2,var)
##  Initial conditions, parameter, driver, and process uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[4,3]
z              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = as.numeric(z[t,zsamps]), r, b, b1, sd_proc = sd_proc)
forecasts[,t] <- x
}
varIPDE <- apply(forecasts,2,var)
V.pred.sim     <- rbind(varIPDE,varIPD,varIP,varI)
V.pred.sim.rel <- apply(V.pred.sim,2,function(x) {x/max(x)})
####
####  PLOT THE FORECASTING UNCERTAINTY PARTITION -------------------------------
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel*100))
var_rel_preds$x <- 1:nrow(var_rel_preds)
my_cols <- c("#0A4D5B", "#139AB8", "#39B181","grey")
my_cols <- c("black", "grey55", "grey70","grey90")
variance_plot <- ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varIPDE), fill=my_cols[4])+
geom_ribbon(aes(ymin=0, ymax=varIPD), fill=my_cols[3])+
geom_ribbon(aes(ymin=0, ymax=varIP), fill=my_cols[2])+
geom_ribbon(aes(ymin=0, ymax=varI), fill=my_cols[1])+
ylab("Percent of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,forecast_steps,by=1),
labels=paste(seq(1,forecast_steps,by=1), "yrs"))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"))+
theme_few()
####
####  COMBINE PLOTS AND SAVE ---------------------------------------------------
####
plot_grid(calibration_plot, variance_plot, nrow = 2, labels = "AUTO")
ggsave(filename = "../figures/bison_combined.png",
width = 4,
height = 6,
units = "in",
dpi =200)
####
####  PARTITION FORECAST UNCERTAINTY -------------------------------------------
####
##  Function for the ecological process (Gompertz population growth)
iterate_process <- function(Nnow, xnow, r, b, b1, sd_proc) {
xnow[xnow>5] <- 5
mu <- log(Nnow) + r + b*log(Nnow) + b1*xnow # determinstic process; log scale
zlog <- rnorm(length(mu), mu, sd_proc) # stochastic process; log scale
N <- exp(zlog) # back transform to arithmetic scale
}
##  Initial condition uncertainty: make forecasts from all MCMC iterations of
##    the final year, but use mean parameter values and no process error.
forecast_steps <- 7
num_iters      <- 50000
x              <- sample(predictions[,nrow(training_dat)], num_iters, replace = TRUE)
param_summary  <- summary(fitted_model$params)$quantile
r              <- param_summary[3,3]
b              <- param_summary[1,3]
b1             <- param_summary[2,3]
sd_proc        <- param_summary[4,3]
z              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = z[t], r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varI <- apply(forecasts,2,var)
##  Initial conditions and parameter uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
sample_params  <- sample.int(nrow(params), size = num_iters, replace = TRUE)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[4,3]
z              <- scl_fut_ppt
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = z[t], r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varIP <- apply(forecasts,2,var)
##  Initial conditions, parameter, and driver uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- params[sample_params,"sigma_proc"]
zsamps         <- sample(x = ncol(gcm_precip[2:ncol(gcm_precip)]), size = num_iters, replace = TRUE)
z              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = as.numeric(z[t,zsamps]), r, b, b1, sd_proc = 0)
forecasts[,t] <- x
}
varIPD <- apply(forecasts,2,var)
##  Initial conditions, parameter, driver, and process uncertainty
x              <- sample(predictions[,nrow(bison_dat)], num_iters, replace = TRUE)
params         <- as.matrix(fitted_model$params)
r              <- params[sample_params,"r"]
b              <- params[sample_params,"b"]
b1             <- params[sample_params,"b1"]
sd_proc        <- param_summary[4,3]
z              <- as.matrix(gcm_precip[2:ncol(gcm_precip)])
forecasts      <- matrix(data = NA, nrow = num_iters, ncol = forecast_steps)
for(t in 1:forecast_steps){
x <- iterate_process(Nnow = x, xnow = as.numeric(z[t,zsamps]), r, b, b1, sd_proc = sd_proc)
forecasts[,t] <- x
}
varIPDE <- apply(forecasts,2,var)
V.pred.sim     <- rbind(varIPDE,varIPD,varIP,varI)
V.pred.sim.rel <- apply(V.pred.sim,2,function(x) {x/max(x)})
####
####  PLOT THE FORECASTING UNCERTAINTY PARTITION -------------------------------
####
var_rel_preds <- as.data.frame(t(V.pred.sim.rel*100))
var_rel_preds$x <- 1:nrow(var_rel_preds)
my_cols <- c("#0A4D5B", "#139AB8", "#39B181","grey")
my_cols <- c("black", "grey55", "grey70","grey90")
variance_plot <- ggplot(data=var_rel_preds, aes(x=x))+
geom_ribbon(aes(ymin=0, ymax=varIPDE), fill=my_cols[4])+
geom_ribbon(aes(ymin=0, ymax=varIPD), fill=my_cols[3])+
geom_ribbon(aes(ymin=0, ymax=varIP), fill=my_cols[2])+
geom_ribbon(aes(ymin=0, ymax=varI), fill=my_cols[1])+
ylab("Percent of uncertainty")+
xlab("Forecast steps")+
scale_x_continuous(breaks=seq(1,forecast_steps,by=1),
labels=paste(seq(1,forecast_steps,by=1), "yrs"))+
scale_y_continuous(labels=paste0(seq(0,100,25),"%"))+
theme_few()
####
####  COMBINE PLOTS AND SAVE ---------------------------------------------------
####
plot_grid(calibration_plot, variance_plot, nrow = 2, labels = "AUTO")
ggsave(filename = "../figures/bison_combined.png",
width = 4,
height = 6,
units = "in",
dpi =200)
